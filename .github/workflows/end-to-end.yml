name: End-to-end

on:
  push:


jobs:
  end-to-end:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: django
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:

      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64'
      -
        name: boot
        env:
          WWW_CRONROBOT_MASTER_KEY: ${{secrets.WWW_CRONROBOT_MASTER_KEY}}
          WWW_CREDENTIALS_PRODUCTION_KEY: ${{secrets.WWW_CREDENTIALS_PRODUCTION_KEY}}
          DOTENV_TEST_DJANGO_B64: ${{ secrets.DOTENV_TEST_DJANGO_B64 }}
        run: |
          echo "$DOTENV_TEST_DJANGO_B64" | base64 -d > .env
          touch .grafana.env
          touch www-cronrobot/.env
          echo "$WWW_CRONROBOT_MASTER_KEY" > www-cronrobot/config/master.key
          mkdir -p www-cronrobot/config/credentials/
          echo "$WWW_CREDENTIALS_PRODUCTION_KEY" > www-cronrobot/config/credentials/production.key

          ls -la www-cronrobot/config/credentials
          cat www-cronrobot/config/credentials/production.key

          docker-compose up -d
          sleep 20
          docker-compose logs celery-admin
      -
        name: Api OK
        env:
          API_BASE_URL: http://localhost:8000/api
        run: |
          bash tests/e2e/api_ok.sh

      - name: API /periodic-tasks
        env:
          API_BASE_URL: http://localhost:8000/api
        run: |
          bash tests/e2e/api_periodic_tasks.sh

